@inject BooksAPIAuthenticationProvider _authenticationProvider;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Books.BlazorWasm</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="export">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Download
            </NavLink>
        </div>      
        @if(userName is null)
        {   
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-arrow-circle-right" aria-hidden="true"></span> Login
            </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="logout">
                    <span class="oi oi-arrow-circle-left" aria-hidden="true"></span> Logout - @userName
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string? userName = null;

    protected override async Task OnParametersSetAsync()
    {
        userName = null;
        if (authenticationStateTask is not null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                userName = user.Claims.FirstOrDefault(c => c.Type == "unique_name")?.Value;
            }
        }
    }
}
